import { ZodOrder } from "@/entities/order.entity";

/**
 * DTO for creating an order.
 * This is derived from the full Order schema by omitting fields
 * that are typically generated by the system (id, status, timestamps).
 */
export const ZodOrderCreationDto = ZodOrder.omit({
  id: true,
  status: true,
  createdAt: true,
  canceledAt: true,
  deliveredAt: true,
});

/**
 * Data Transfer Object for creating an order.
 * Represents the minimal data required to create an order.
 */
export type OrderCreationDto = {
  /** ID of the user placing the order. */
  userId: number;

  /** List of products included in the order with their quantities. */
  products: {
    productId: number;
    quantity: number;
  }[];

  /** Total price for the order (validated by the server/persistence layer). */
  total: number;
};

/**
 * Data Transfer Object for a full Order view.
 * Represents the complete order data as returned by the API/service.
 */
export type OrderDto = {
  /** Unique identifier for the order. */
  id: number;

  /** User ID who placed the order. */
  userId: number;

  /** List of products in the order with their quantities. */
  products: {
    productId: number;
    quantity: number;
  }[];

  /** Current status of the order: Processing, Delivered, or Canceled. */
  status: "Processing" | "Delivered" | "Canceled";

  /** Total price for the order. */
  total: number;

  /** Timestamp when the order was created. */
  createdAt: Date;

  /** Optional timestamp when the order was canceled (if canceled). */
  canceledAt?: Date | undefined;

  /** Optional timestamp when the order was delivered (if delivered). */
  deliveredAt?: Date | undefined;
};
